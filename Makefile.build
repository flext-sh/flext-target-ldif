# FLEXT STANDARDIZED BUILD SYSTEM - Makefile.build
# ===================================================
# Universal build system for all FLEXT projects
# Generated from workspace root - DO NOT EDIT MANUALLY
# Updated: 2025-07-19 12:30:00
# Python 3.13 | Poetry | Enterprise Standards

# üö´ DO NOT EDIT THIS FILE DIRECTLY
# This file is automatically distributed from the workspace root
# Edit ..Makefile.build instead

# Use std- prefix to avoid conflicts with project-specific targets
.PHONY: std-help std-install std-install-dev std-test std-test-unit std-test-integration std-test-coverage
.PHONY: std-lint std-format std-check std-type-check std-security std-pre-commit
.PHONY: std-build std-build-clean std-publish std-publish-test std-docs std-docs-serve
.PHONY: std-dev std-dev-setup std-clean std-clean-all std-validate-setup
.PHONY: std-deps-update std-deps-show std-deps-audit

# ============================================================================
# üéØ CONFIGURATION & DETECTION
# ============================================================================

# Detect project name from directory
PROJECT_NAME := $(shell basename $(CURDIR))
PROJECT_TITLE := $(shell echo $(PROJECT_NAME) | sed 's/-/ /g' | sed 's/\b\w/\u&/g')

# Python environment detection
PYTHON := python3.13
POETRY := poetry
VENV_PATH := $(shell poetry env info --path 2>/dev/null || echo "")

# Color codes for output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m

# ============================================================================
# üìã HELP & INFORMATION
# ============================================================================

std-help: ## Show standardized build system help
	@echo "$(CYAN)üèóÔ∏è  $(PROJECT_TITLE) - FLEXT Standardized Build System$(RESET)"
	@echo "$(CYAN)======================================================$(RESET)"
	@echo "$(BLUE)üì¶ Project: $(PROJECT_NAME)$(RESET)"
	@echo "$(BLUE)üêç Python: $(PYTHON)$(RESET)"
	@echo "$(BLUE)üìù Poetry: $(shell poetry --version 2>/dev/null || echo "Not installed")$(RESET)"
	@echo "$(BLUE)üåê Venv: $(shell [ -n "$(VENV_PATH)" ] && echo "$(VENV_PATH)" || echo "Not activated")$(RESET)"
	@echo ""
	@echo "$(YELLOW)Standardized targets (use std- prefix):$(RESET)"
	@grep -E '^std-[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(CYAN)%-25s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üí° Usage: make std-<target>$(RESET)"
	@echo "$(YELLOW)üí° Example: make std-test, make std-lint, make std-build$(RESET)"

# ============================================================================
# üì¶ DEPENDENCY MANAGEMENT
# ============================================================================

std-validate-setup: ## Validate development environment
	@echo "$(BLUE)üîç Validating development environment...$(RESET)"
	@command -v $(PYTHON) >/dev/null 2>&1 || { echo "$(RED)‚ùå Python 3.13 not found$(RESET)"; exit 1; }
	@command -v $(POETRY) >/dev/null 2>&1 || { echo "$(RED)‚ùå Poetry not found$(RESET)"; exit 1; }
	@test -f pyproject.toml || { echo "$(RED)‚ùå pyproject.toml not found$(RESET)"; exit 1; }
	@echo "$(GREEN)‚úÖ Environment validation passed$(RESET)"

std-install: std-validate-setup ## Install runtime dependencies only
	@echo "$(BLUE)üì¶ Installing runtime dependencies for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) install --only main
	@echo "$(GREEN)‚úÖ Runtime dependencies installed$(RESET)"

std-install-dev: std-validate-setup ## Install all dependencies including dev tools
	@echo "$(BLUE)üì¶ Installing all dependencies for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) install --all-extras
	@echo "$(GREEN)‚úÖ All dependencies installed$(RESET)"

std-deps-update: ## Update dependencies to latest versions
	@echo "$(BLUE)üîÑ Updating dependencies for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) update
	@echo "$(GREEN)‚úÖ Dependencies updated$(RESET)"

std-deps-show: ## Show dependency tree
	@echo "$(BLUE)üìä Dependency tree for $(PROJECT_NAME):$(RESET)"
	@$(POETRY) show --tree

std-deps-audit: ## Audit dependencies for security vulnerabilities
	@echo "$(BLUE)üîç Auditing dependencies for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run pip-audit --format=columns || echo "$(YELLOW)‚ö†Ô∏è  pip-audit not available$(RESET)"
	@$(POETRY) run safety check --json || echo "$(YELLOW)‚ö†Ô∏è  safety not available$(RESET)"

# ============================================================================
# üß™ TESTING
# ============================================================================

std-test: ## Run all tests
	@echo "$(BLUE)üß™ Running all tests for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run pytest -xvs
	@echo "$(GREEN)‚úÖ All tests passed$(RESET)"

std-test-unit: ## Run unit tests only
	@echo "$(BLUE)üß™ Running unit tests for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run pytest tests/unit/ -xvs -m "not integration and not slow"
	@echo "$(GREEN)‚úÖ Unit tests passed$(RESET)"

std-test-integration: ## Run integration tests only
	@echo "$(BLUE)üß™ Running integration tests for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run pytest tests/integration/ -xvs -m "integration"
	@echo "$(GREEN)‚úÖ Integration tests passed$(RESET)"

std-test-coverage: ## Run tests with coverage report
	@echo "$(BLUE)üß™ Running tests with coverage for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run pytest --cov --cov-report=html --cov-report=term-missing --cov-report=xml
	@echo "$(GREEN)‚úÖ Coverage report generated$(RESET)"

std-test-watch: ## Run tests in watch mode
	@echo "$(BLUE)üëÄ Running tests in watch mode for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run pytest-watch --clear

# ============================================================================
# üé® CODE QUALITY & FORMATTING
# ============================================================================

std-lint: ## Run all linters with maximum strictness
	@echo "$(BLUE)üîç Running maximum strictness linting for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run ruff check . --output-format=github
	@echo "$(GREEN)‚úÖ Linting completed$(RESET)"

std-format: ## Format code with strict standards
	@echo "$(BLUE)üé® Formatting code for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run ruff format .
	@$(POETRY) run ruff check . --fix --unsafe-fixes
	@echo "$(GREEN)‚úÖ Code formatted$(RESET)"

std-type-check: ## Run strict type checking
	@echo "$(BLUE)üîç Running strict type checking for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run mypy src/ --strict --show-error-codes
	@echo "$(GREEN)‚úÖ Type checking passed$(RESET)"

std-security: ## Run security analysis
	@echo "$(BLUE)üîí Running security analysis for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run bandit -r src/ -f json || echo "$(YELLOW)‚ö†Ô∏è  bandit not available$(RESET)"
	@$(POETRY) run detect-secrets scan --all-files || echo "$(YELLOW)‚ö†Ô∏è  detect-secrets not available$(RESET)"
	@echo "$(GREEN)‚úÖ Security analysis completed$(RESET)"

std-check: std-lint std-type-check std-security ## Run all quality checks
	@echo "$(BLUE)üîç Running comprehensive quality checks for $(PROJECT_NAME)...$(RESET)"
	@echo "$(GREEN)‚úÖ All quality checks passed$(RESET)"

std-pre-commit: ## Run pre-commit hooks
	@echo "$(BLUE)üîß Running pre-commit hooks for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run pre-commit run --all-files || echo "$(YELLOW)‚ö†Ô∏è  pre-commit not available$(RESET)"
	@echo "$(GREEN)‚úÖ Pre-commit hooks completed$(RESET)"

# ============================================================================
# üèóÔ∏è BUILD & DISTRIBUTION
# ============================================================================

std-build: std-clean ## Build the package with Poetry
	@echo "$(BLUE)üèóÔ∏è  Building $(PROJECT_NAME) package...$(RESET)"
	@$(POETRY) build
	@echo "$(GREEN)‚úÖ Package built successfully$(RESET)"
	@echo "$(BLUE)üì¶ Build artifacts:$(RESET)"
	@ls -la dist/

std-build-clean: std-clean std-build ## Clean then build
	@echo "$(GREEN)‚úÖ Clean build completed$(RESET)"

std-publish-test: std-build ## Publish to TestPyPI
	@echo "$(BLUE)üì§ Publishing $(PROJECT_NAME) to TestPyPI...$(RESET)"
	@$(POETRY) publish --repository testpypi
	@echo "$(GREEN)‚úÖ Published to TestPyPI$(RESET)"

std-publish: std-build ## Publish to PyPI
	@echo "$(BLUE)üì§ Publishing $(PROJECT_NAME) to PyPI...$(RESET)"
	@$(POETRY) publish
	@echo "$(GREEN)‚úÖ Published to PyPI$(RESET)"

# ============================================================================
# üìö DOCUMENTATION
# ============================================================================

std-docs: ## Generate documentation
	@echo "$(BLUE)üìö Generating documentation for $(PROJECT_NAME)...$(RESET)"
	@if [ -f mkdocs.yml ]; then \
		$(POETRY) run mkdocs build; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  No mkdocs.yml found, skipping documentation generation$(RESET)"; \
	fi
	@echo "$(GREEN)‚úÖ Documentation generated$(RESET)"

std-docs-serve: ## Serve documentation locally
	@echo "$(BLUE)üìö Serving documentation for $(PROJECT_NAME)...$(RESET)"
	@if [ -f mkdocs.yml ]; then \
		$(POETRY) run mkdocs serve; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  No mkdocs.yml found$(RESET)"; \
	fi

# ============================================================================
# üöÄ DEVELOPMENT
# ============================================================================

std-dev-setup: std-install-dev ## Complete development setup
	@echo "$(BLUE)üöÄ Setting up development environment for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run pre-commit install || echo "$(YELLOW)‚ö†Ô∏è  pre-commit not available$(RESET)"
	@echo "$(GREEN)‚úÖ Development environment ready$(RESET)"

std-dev: ## Run in development mode
	@echo "$(BLUE)üöÄ Starting development mode for $(PROJECT_NAME)...$(RESET)"
	@if [ -f src/$(shell echo $(PROJECT_NAME) | sed 's/-/_/g')/cli.py ]; then \
		$(POETRY) run python -m $(shell echo $(PROJECT_NAME) | sed 's/-/_/g').cli --dev; \
	elif [ -f src/$(shell echo $(PROJECT_NAME) | sed 's/-/_/g')/main.py ]; then \
		$(POETRY) run python -m $(shell echo $(PROJECT_NAME) | sed 's/-/_/g').main --dev; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  No main entry point found$(RESET)"; \
	fi

std-dev-test: ## Quick development test cycle
	@echo "$(BLUE)‚ö° Quick development test cycle for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) run ruff check . --fix
	@$(POETRY) run pytest tests/ -x --tb=short
	@echo "$(GREEN)‚úÖ Development test cycle completed$(RESET)"

# ============================================================================
# üßπ CLEANUP
# ============================================================================

std-clean: ## Clean build artifacts
	@echo "$(BLUE)üßπ Cleaning build artifacts for $(PROJECT_NAME)...$(RESET)"
	@rm -rf build/
	@rm -rf dist/
	@rm -rf *.egg-info/
	@rm -rf .pytest_cache/
	@rm -rf .coverage
	@rm -rf htmlcov/
	@rm -rf .mypy_cache/
	@rm -rf .ruff_cache/
	@rm -rf reports/
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type f -name "*.pyo" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Cleanup completed$(RESET)"

std-clean-all: std-clean ## Clean everything including virtual environment
	@echo "$(BLUE)üßπ Deep cleaning for $(PROJECT_NAME)...$(RESET)"
	@$(POETRY) env remove --all || true
	@echo "$(GREEN)‚úÖ Deep cleanup completed$(RESET)"

# ============================================================================
# üéØ WORKSPACE INTEGRATION
# ============================================================================

std-workspace-sync: ## Sync with workspace standards
	@echo "$(BLUE)üîÑ Syncing $(PROJECT_NAME) with workspace standards...$(RESET)"
	@if [ -f ../Makefile.build ]; then \
		cp ../Makefile.build . && echo "$(GREEN)‚úÖ Makefile.build updated$(RESET)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  No workspace Makefile.build found$(RESET)"; \
	fi

std-workspace-validate: ## Validate workspace compliance
	@echo "$(BLUE)üîç Validating workspace compliance for $(PROJECT_NAME)...$(RESET)"
	@test -f pyproject.toml || { echo "$(RED)‚ùå pyproject.toml missing$(RESET)"; exit 1; }
	@test -f CLAUDE.md || echo "$(YELLOW)‚ö†Ô∏è  CLAUDE.md missing$(RESET)"
	@test -f README.md || echo "$(YELLOW)‚ö†Ô∏è  README.md missing$(RESET)"
	@test -d src/ || { echo "$(RED)‚ùå src/ directory missing$(RESET)"; exit 1; }
	@test -d tests/ || echo "$(YELLOW)‚ö†Ô∏è  tests/ directory missing$(RESET)"
	@echo "$(GREEN)‚úÖ Workspace compliance validated$(RESET)"

# ============================================================================
# üìä INFORMATION & DIAGNOSTICS
# ============================================================================

std-info: ## Show project information
	@echo "$(CYAN)üìä Project Information$(RESET)"
	@echo "$(CYAN)===================$(RESET)"
	@echo "$(BLUE)Project Name:$(RESET) $(PROJECT_NAME)"
	@echo "$(BLUE)Project Title:$(RESET) $(PROJECT_TITLE)"
	@echo "$(BLUE)Python Version:$(RESET) $(shell $(PYTHON) --version 2>/dev/null || echo "Not found")"
	@echo "$(BLUE)Poetry Version:$(RESET) $(shell $(POETRY) --version 2>/dev/null || echo "Not found")"
	@echo "$(BLUE)Virtual Environment:$(RESET) $(shell [ -n "$(VENV_PATH)" ] && echo "$(VENV_PATH)" || echo "Not activated")"
	@echo "$(BLUE)Working Directory:$(RESET) $(CURDIR)"
	@echo "$(BLUE)Git Branch:$(RESET) $(shell git branch --show-current 2>/dev/null || echo "Not a git repo")"
	@echo "$(BLUE)Git Status:$(RESET) $(shell git status --porcelain 2>/dev/null | wc -l | xargs echo) files changed"

# ============================================================================
# üéØ CONVENIENCE ALIASES
# ============================================================================

# Create non-conflicting aliases for common operations
flext-help: std-help ## Alias for std-help
flext-test: std-test ## Alias for std-test
flext-lint: std-lint ## Alias for std-lint
flext-format: std-format ## Alias for std-format
flext-build: std-build ## Alias for std-build
flext-clean: std-clean ## Alias for std-clean
flext-check: std-check ## Alias for std-check
flext-install: std-install-dev ## Alias for std-install-dev
